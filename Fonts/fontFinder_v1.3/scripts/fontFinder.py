#SYNTAX: fontFinder.py  deleteOrList(STRING - '-d', '-delete' or '-l') logPath(STRING) archiveFile(STRING) isVerbose(STRING - 'verbose', 'v' or empty) timeStamp

import glob
import subprocess
import os.path
import sys
from time import gmtime, strftime

#
#    FUNCTIONS
#

#This function will only print to terminal if 'verbose' or 'v' have been passed as the third argument
def printIfVerbose(outString):

	try:
		if sys.argv[4] == "-v" or sys.argv[4] == "-verbose":
			print outString
	except: 
		pass

#This function will print a string to logOUt and the terminal
def logAndPrint(outString):
	logOut.write(outString)
	printIfVerbose(outString)

fontList=[[],[],[]]

#Stamp tar file with same time as log (generated by shell script)
timeStamp=sys.argv[5]

#A list containing any directories which this script shouldn't touch
ringfencedDirs=["/System/Library", "/Application"]

#Open log file for writing tarred fonts into, and write out header
logPath=os.path.abspath(sys.argv[2])
logOut = open(logPath, 'w')

logOut.write("------------------------------------------\n FONTFINDER REPORT - " + strftime("%Y%m%d", gmtime()) + "\n------------------------------------------\n\n")
logOut.write("Command: " + (" ".join(sys.argv)) + "\n\n")

#Read archive name from user input, and append the current time to it. 
archiveFile = os.path.abspath(sys.argv[3])
archiveFile = archiveFile + "-" + timeStamp

whiteFile = open('./whiteList.txt','r')

for l in whiteFile:

	#Read whiteList into a list
	whiteList = [l.strip().lower() for l in whiteFile]


	#The only non-alphanumeric characters in fontwise reports are hyphens - add versions of these without hyphens into the whitelist
	if "-" in l:
		whiteList.append(l.strip().lower().replace("-",""))

#Get filename of tab file returned by FW_Client
tabFiles = glob.glob('./fontwise/*.tab')

#Generate fontList containing the names, processed names, and paths of every font on the computer according to Fontwise.
for tF in tabFiles:

	#Open the file	
	f = open(tF,'r')
	
	for l in f:

		fontNiceName = l.split('\t')[0]
		fontName = fontNiceName.strip().lower() 
		fontPath = l.split('\t')[3].strip() 

		fontList[0].append(fontNiceName)
		fontList[1].append(fontName)
		fontList[2].append(fontPath)
	
		#ERRATA: A much nicer way of creating this list - deprecated before NiceName was introduced since hyphen jiggery forbids it
		#fontList=[ [l.split('\t')[0].strip() for l in f ] , [l.split('\t')[3].strip() for l in g ] ]

if ringfencedDirs != []:
	logAndPrint("Ringfencing following files: (these will not be deleted)\n")

#Purge any ringfenced directories (i.e System/Library) from fontList

for rFence in ringfencedDirs:
	for fPath in fontList[2]:
		if rFence in fPath:
			
			logAndPrint(fPath + '\n')

			rFIndex = fontList[2].index(fPath)
			
			del fontList[0][rFIndex]
			del fontList[1][rFIndex]
			del fontList[2][rFIndex]

printIfVerbose("Log file: " + str(logPath) + "\n")

#If there are fonts in fontList which aren't on the whiteList, find them. 
if not(set(fontList[1]).issubset(set(whiteList))):

	#Get lists of bad fonts, their paths and nicely formatted names
	badFonts = list(set(fontList[1]).difference(set(whiteList)))
	badFontsNice = sorted([ fontList[0][fontList[1].index(badFont)] for badFont in badFonts ])
	badFontPaths = [ fontList[2][fontList[1].index(badFont)] for badFont in badFonts ] 

	#Write fonts to be tarred to the terminal...
	printIfVerbose("\nFonts to be tarred:\n")
	printIfVerbose('\n'.join(badFontsNice))
	
	#...and to the log file. 
	logOut.write("\rTarred fonts:\r\r")
	
	printIfVerbose("\nCreating .tar file...")
	
	delCount=0


	for font in badFonts:
	
		logOut.write(badFontsNice[ badFonts.index(font) ])
		logOut.write(badFontPaths[ badFonts.index(font) ] + "\n")

		#Get path of font to delete
		badFontPath = fontList[2][fontList[1].index(font)]
	
		#Tar up the files
		try:
			if os.path.isfile(archiveFile):
				subprocess.check_call(["tar", "-rPf", archiveFile, badFontPath])
			else:	
				subprocess.check_call(["tar", "-cPf", archiveFile, badFontPath])
		
			#Delete the files
			if sys.argv[1] == '-d' or sys.argv[1] == '-delete' :
					
				if delCount==0:	
				
					if sys.argv[1] == '-d' or sys.argv[1] == '-delete' :
						printIfVerbose("\nDeleting existing fonts...\n")

					delCount=1

				try:
					subprocess.call(["rm", badFontPath])
				except:
					logAndPrint("ERROR: could not delete file:" + badFontPath)

	
		except subprocess.CalledProcessError as e:
			logAndPrint("ERROR: could not tar file " + badFontPath + ". tar returned with an exit code of " + str(e.returncode) + ". File has not been deleted.") 		
		
else:
	logAndPrint("\rNo illegal fonts found on this system\n")

printIfVerbose("Done\n")
